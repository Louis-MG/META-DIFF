rule machine_learning:
    input:
        matrix = config["project_path"] + config['experiment_name'] + "/biomarker/output_query_unitigs/biomarkers.tsv"
    output:
        config["project_path"] + config['experiment_name'] + "/ML/" + "/histograms/allclasses.png",
        config["project_path"] + config['experiment_name'] + "/ML/" + "/ord/lda.png"
    params:
        neptune_key = config["neptune_key"],
        script_path = config["src_path"] + "/scripts/ml.py",
        n_splits = config["n_splits"],
        n_calls = config["n_calls"],
        experiment_name = config["experiment_name"],
        log_neptune = config["log_neptune"],
        log_shap = config["log_shap"],
        output = config["project_path"] + config['experiment_name'] + "/ML/"
    conda:
        "../../env/python.3.10.yaml"
    log:
        stdout = config["project_path"] + config['experiment_name'] + "/logs/machine_learning.stdout",
        stderr = config["project_path"] + config['experiment_name'] + "/logs/machine_learning.stderr"
    shell:
        """
        sed -i 's/control[0-9]*/control/g;s/case[0-9]*/case/g' {input.matrix}
        export NEPTUNE_API_TOKEN={params.neptune_key}
        export NEPTUNE_PROJECT_NAME={params.experiment_name}
        python3 {params.script_path} --input {input.matrix} --output {params.output} --log_neptune {params.log_neptune} \
        --log_shap {params.log_shap} --n_splits {params.n_splits} --n_calls {params.n_calls} --experiment_name {params.experiment_name} > {log.stdout} 2> {log.stderr}
        """

