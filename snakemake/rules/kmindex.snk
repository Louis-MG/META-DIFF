rule pval_agg:
    input:
        unitigs = config["project_path"] + "pipeline_output/kmdiff_output/{condition}_kmers.unitigs.fa",
        kmers = config["project_path"] + "pipeline_output/kmdiff_output/{condition}_kmers.fasta"
    output:
        config["project_path"] + "pipeline_output/biomarker/{condition}.aggregated.fa"
    params:
        output = config["project_path"] + "pipeline_output/biomarker/",
        script_path = "scripts/pvalues_agg.py",
        condition_name = lambda wildcards: wildcards.condition
    conda:
        "../../env/python.3.10.yaml"
    shell:
        """
        python3 {params.script_path} -k {input.kmers} -u {input.unitigs} -o {params.output} -p {params.condition_name}
        """

rule kmindex_build:
    input:
        fof= config["fof"]
    output:
        index = config["project_path"] + "pipeline_output/biomarker/index"
    threads: config["threads"]
    params:
        output_dir = config["project_path"] + "pipeline_output/biomarker/",
        bloom_filter= config["bloom_filter"],
        bitw= config["bitw"]
    conda:
        "../../env/kmindex.yaml"
    shell:
        """
        kmindex build --fof {input.fof} --run-dir {params.output_dir}/index_workdir --index {output.index} --register-as biomarkers --hard-min 1 --kmer-size 25 --bloom-size {params.bloom_filter} --bitw {params.bitw} --threads {threads}
        """


rule get_query:
    input:
        case = config["project_path"] + "pipeline_output/biomarker/case.aggregated.fa",
        control = config["project_path"] + "pipeline_output/biomarker/control.aggregated.fa"
    output:
        query = config["project_path"] + "pipeline_output/biomarker/top_unitigs.fa"
    params:
        top_unitigs = config["top_unitigs"]
    shell:
        """
        head -n {params.top_unitigs} {input.case} > {output.query}
        head -n {params.top_unitigs} {input.control} >> {output.query}
        """

rule kmindex_query:
    input:
        unitigs = config["project_path"] + "pipeline_output/biomarker/top_unitigs.fa"
    output:
        folder = config["project_path"] + "pipeline_output/biomarker/output_query_unitigs",
        file = config["project_path"] + "pipeline_output/biomarker/output_query_unitigs/index.tsv"
    threads: config["threads"]
    conda:
        "../../env/kmindex.yaml"
    shell:
        """
        kmindex query -i {output}/index -z 6 -o {output.folder} --fastx {input.unitigs} --format matrix -a -t {threads}
        """

rule classification :
    input:
        matrix= config["project_path"] + "pipeline_output/biomarker/output_query_unitigs/unitig_abundances.tsv"
    output:
        output = config["project_path"] + "pipeline_output/biomarker/"
    threads: config["threads"]
    params:
        script_path= "scripts/ml.py"
    conda:
        "../../env/python.3.10.yaml"
    shell:
        """
        sed -i 's/control[0-9]*/control/g;s/case[0-9]*/case/g' {input.matrix}
        python3 {params.script_path}
        """
