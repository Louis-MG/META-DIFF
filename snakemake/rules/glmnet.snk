
###############

rule glment_extract:
    input:
	m8 = config['project_path'] + "/pipeline_output/RESULTS_DB/{wildcard}_results.m8",
	fasta = config['project_path'] + "/pipeline_output/kmdiff_output/{wildcard}_kmers.unitigs.fa"
    output:
	config['project_path'] + "/pipeline_output/glmnet/{wildcard}_unclassified.fa"
    params:
	output = config['project_path'] + "/pipeline_output/glmnet/"
    shell:
	"""
	bash find_unaligned.sh --fasta {input.fasta} --m8 {input.m8} --output {params.output}
	mv {params.output}/unclassified.fa {output}
	"""


############## RENOMMER LES FICHIERS DE SORTIE POUR QUE CA CORRESPONDE
rule glmnet_pval_agg:
    input:
	unitigs = config['project_path'] + "/pipeline_output/kmdiff_output/{wildcard}_kmers.unitigs.fa",
	kmers = config['project_path'] + "/pipeline_output/kmdiff_output/{wildcard}_kmers.fa"
    output:
	config['project_path'] + "/pipeline_output/glmnet/{wildcard}_unclassified.aggregated.fa"
    params:
	output = output = config['project_path'] + "/pipeline_output/glmnet/"
    shell:
	"""
	python3 pvalues_agg.py -k {input.kmers} -u {input.unitigs} -o {params.output}
	mv {params.output}/unclassified.fa {output}
	"""

rule glmnet_matrix:
    input:
	case = config['project_path'] + "/pipeline_output/kmdiff_output/case_kmers.fa",
	control = config['project_path'] + "/pipeline_output/kmdiff_output/control_kmers.fa",
	matrix = config['project_path'] + "/kmdiff_output/significant_kmers_matrix.txt"
    output:
	config['project_path'] + "/glmnet/top_kmers.tsv"
    params:
	output = config['project_path'] + "/glmnet/"
    shell:
	"""
	bash matrix_unknown_kmers.sh -i {input.case},{input.control} -m {input.matrix} -o {params.output}
	"""

rule glmnet_class:
    input:
	matrix = config['project_path'] + "/glmnet/top_kmers.tsv",
	fof = config['project_path'] + "/fof.txt" 
    output:
	config['project_path'] + "/glmnet/best_model.txt". config['project_path'] + "/glmnet/heatmap.pdf", config['project_path'] + "/glmnet/accuracy.txt", config['project_path'] + "/glmnet/matrix.tsv"
    threads:
	30
    params:
	output_folder = config['project_path'] + "/glmnet/",
	split = 0.75
    shell:
	"""
	nb_control=$(grep -c -F 'case' {input.fof})
	nb_case=$(grep -c -F 'control' {input.fof})
	Rscript elasticNet_and_heatmap.R -i {input.matrix} - {threads} --case "$nb_case" --control "$nb_control" --output {params.output_folder} -y {params.split}
	"""
