#############

rule annot_extract_candidates:
    input:
        config["project_path"] + "pipeline_output/kmdiff_output/{condition}_kmers.unitigs.fa"
    output:
        config["project_path"] + "pipeline_output/functional_annotation/{condition}_unitigs.filtered.fa"
    params:
        length = config["unitig_length"]
    conda:
        "../../env/seqkit.yaml"
    shell:
        """
        seqkit seq --min-len {params.length} -i {input} > {output} 
        """


rule prodigal:
    input:
        config["project_path"] + "pipeline_output/functional_annotation/{condition}_unitigs.filtered.fa"
    output:
        config["project_path"] + "pipeline_output/functional_annotation/{condition}_protein_translation.faa", config["project_path"] + "pipeline_output/functional_annotation/{condition}_coords.gbk"
    threads : config["threads"]
    params:
        coords = config["project_path"] + "pipeline_output/functional_annotation/{condition}_coords.gbk",
        translation = config["project_path"] + "pipeline_output/functional_annotation/{condition}_protein_translation.faa",
    conda:
        "../../env/prodigal.yaml"
    shell:
        """
        prodigal -p meta -i {input} -o {params.coords} -a {params.translation}
        """

rule microbeannotator:
    input:
        expand(config["project_path"] + "pipeline_output/functional_annotation/{prefix}_protein_translation.faa", prefix = ["case", "control"])
    output:
        config["project_path"] + "pipeline_output/functional_annotation/metabolic_summary__heatmap.pdf", config["project_path"] + "pipeline_output/functional_annotation/metabolic_summary__barplot.pdf", config["project_path"] + "pipeline_output/functional_annotation/metabolic_summary__module_completeness.tab"
    threads: config["threads"]
    params:
        process = 1,
        database = config["microbeannotator_db_path"],
        output_folder = config["project_path"] + "pipeline_output/functional_annotation/"
    conda:
        "../../env/microbeannotator.yaml"
    shell:
        """
        microbeannotator  -p {params.process} -t {threads} -m diamond --database {params.database} --cluster rows -o {params.output_folder} -i {input}
        """

rule summary_table:
    input:
        config["project_path"] + "pipeline_output/functional_annotation/{condition}_protein_translation.faa"
    output:
        config["project_path"] + "pipeline_output/functional_annotation/{condition}_unitigs_to_gene_functions.tsv"
    params:
        unitigs = config["project_path"] + "pipeline_output/kmdifff_output/{condition}_unitigs.filtered.fa",
        annot = config["project_path"] + "pipeline_output/functional_annotation/{condition}_protein_translation.faa.annot,
        output = config["project_path"] + "pipeline_output/functional_annotation/",
        script_path = "scripts/summary_table.py"
    conda: 
        "../../env/python.3.10.yaml"
    shell:
        """
	python3 {params.script_path} -a {params.annot} -g {input} -o {params.output} -u {params.unitigs} -c {condition}
        """
