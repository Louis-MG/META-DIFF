#############

rule annot_extract_candidates:
    input:
        config["project_path"] + config['experiment_name'] + "/kmdiff_output/{condition}_kmers.unitigs.fa"
    output:
        config["project_path"] + config['experiment_name'] + "/functional_annotation/{condition}_unitigs.filtered.fa"
    params:
        length = config["unitig_length"]
    log:
        stdout = config["project_path"] + config['experiment_name'] + "/logs/annot_extract_candidates_{condition}.stdout",
        stderr = config["project_path"] + config['experiment_name'] + "/logs/annot_extract_candidates_{condition}.stderr"
    conda:
        "../../env/seqkit.yaml"
    shell:
        """
        seqkit seq --min-len {params.length} -i {input} -o {output} 1> {log.stdout} 2> {log.stderr}
        """


rule prodigal:
    input:
        config["project_path"] + config['experiment_name'] + "/functional_annotation/{condition}_unitigs.filtered.fa"
    output:
        config["project_path"] + config['experiment_name'] + "/functional_annotation/{condition}_protein_translation.faa",
        config["project_path"] + config['experiment_name'] + "/functional_annotation/{condition}_coords.gbk"
    threads : config["threads"]
    params:
        coords = config["project_path"] + config['experiment_name'] + "/functional_annotation/{condition}_coords.gbk",
        translation = config["project_path"] + config['experiment_name'] + "/functional_annotation/{condition}_protein_translation.faa"
    log:
        stdout = config["project_path"] + config['experiment_name'] + "/logs/prodigal_{condition}.stdout",
        stderr = config["project_path"] + config['experiment_name'] + "/logs/prodigal_{condition}.stderr"
    conda:
        "../../env/prodigal.yaml"
    shell:
        """
        if [ ! -s {input} ]
        then
            echo "No unitigs for gene sequence detection and translation." > {log.stdout}
            touch {output}
            exit 0
        else
            prodigal -p meta -i {input} -o {params.coords} -a {params.translation} > {log.stdout} 2> {log.stderr}
        fi
        """

rule microbeannotator:
    input:
        case = config["project_path"] + config['experiment_name'] + "/functional_annotation/case_protein_translation.faa",
        control = config["project_path"] + config['experiment_name'] + "/functional_annotation/control_protein_translation.faa"
    output:
        case_annot = config["project_path"] + config['experiment_name'] + "/functional_annotation/annotation_results/case_protein_translation.faa.annot",
        case_ko = config["project_path"] + config['experiment_name'] + "/functional_annotation/annotation_results/case_protein_translation.faa.ko",
        control_annot = config["project_path"] + config['experiment_name'] + "/functional_annotation/annotation_results/control_protein_translation.faa.annot",
        control_ko = config["project_path"] + config['experiment_name'] + "/functional_annotation/annotation_results/control_protein_translation.faa.ko"
    threads: config["threads"]
    log:
        stdout = config["project_path"] + "logs/microbeannotator.stdout",
        stderr = config["project_path"] + "logs/microbeannotator.stderr"
    params:
        process = 1,
        database = config["microbeannotator_db_path"],
        output_folder = config["project_path"] + config['experiment_name'] + "/functional_annotation/"
    conda:
        "../../env/microbeannotator.yaml"
    shell:
        """
        if [ ! -s {input.case} ] && [ ! -s {input.control} ]
        then
            echo "No gene sequence detected." > {log.stdout}
            touch {output}
            exit 0
        elif [ ! -s {input.case} ] && [ -s {input.control} ]
        then
            echo "No unitigs to annotate in cases" > {log.stdout}
            touch {output.case_annot} {output.case_ko}
            microbeannotator  -p {params.process} -t {threads} -m diamond --database {params.database} --cluster rows \
                     -o {params.output_folder} -i {input.control} >> {log.stdout} 2> {log.stderr}
        elif [ -s {input.case} ] && [ ! -s {input.control} ]
        then
            echo "No unitigs to annotate in controls" > {log.stdout}
            touch {output.control_annot} {output.control_ko}
            microbeannotator  -p {params.process} -t {threads} -m diamond --database {params.database} --cluster rows \
                     -o {params.output_folder} -i {input.case} >> {log.stdout} 2> {log.stderr}
        else
            microbeannotator  -p {params.process} -t {threads} -m diamond --database {params.database} --cluster rows \
                     -o {params.output_folder} -i {input.control} {input.case} > {log.stdout} 2> {log.stderr}
        fi
        """


rule summary_table:
    input:
        translation = config["project_path"] + config['experiment_name'] + "/functional_annotation/{condition}_protein_translation.faa",
        unitigs = config["project_path"] + config['experiment_name'] + "/functional_annotation/{condition}_unitigs.filtered.fa",
        kraken_output = config["project_path"] + config['experiment_name'] + "/taxonomy/kraken_{condition}.output",
        ko = config["project_path"] + config['experiment_name'] + "/functional_annotation/annotation_results/{condition}_protein_translation.faa.ko",
        annot = config["project_path"] + config['experiment_name'] + "/functional_annotation/annotation_results/{condition}_protein_translation.faa.annot"
    output:
        table = config["project_path"] + config['experiment_name'] + "/functional_annotation/{condition}_unitigs_to_clade_and_gene_functions.tsv",
        clades = config["project_path"] + config['experiment_name'] + "/taxonomy/{condition}_clades.tsv"
    params:
        output = config["project_path"] + config['experiment_name'] + "/functional_annotation/",
        script_path = config["src_path"] + "/scripts/sumup_table.py",
        condition_name = lambda wildcards: wildcards.condition
    log:
        stdout = config["project_path"] + "logs/summary_table_{condition}.stdout",
        stderr = config["project_path"] + "logs/summary_table_{condition}.stderr"
    conda: 
        "../../env/python.3.10.yaml"
    shell:
        """
        if [ ! -s {input.translation} ]
        then
            echo "No table to built, no gene was detected" > {log.stdout}
            touch {output.clades} {output.table}
            exit 0
        else
            python3 {params.script_path} -a {input.annot} -g {input.translation} -o {params.output} -u {input.unitigs} \
            -c {params.condition_name} -k {input.kraken_output} >> {log.stdout} 2> {log.stderr}
            mv {params.output}/{params.condition_name}_clades.tsv  {params.output}/../taxonomy/
        fi
        """
    
